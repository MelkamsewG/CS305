
Reading home works
Data types > Arrays 
• Is array copied? 
What is this code going to show?
let fruits = ["Apples", "Pear", "Orange"]; 
// push a new value into the "copy" 
let shoppingCart = fruits; shoppingCart.push("Banana");
 // what's in fruits? 
alert( fruits.length ); //  4


• Array operations. 
Let’s try 5 array operations. 
1. Create an array styles with items “Jazz” and “Blues”.
2. Append “Rock-n-Roll” to the end. 
3. Replace the value in the middle by “Classics”. Your code for finding the middle value should work for any arrays with odd length. 
4. Strip off the first value of the array and show it. 
5. Prepend Rap and Reggae to the array.
   
Array progress

Jazz, Blues
Jazz, Blues, Rock-n-Roll
Jazz, Classics, Rock-n-Roll
Classics, Rock-n-Roll
Rap, Reggae, Classics, Rock-n-Roll

solution

let styles = ["Jazz", "Blues"];
styles.push("Rock-n-Roll");
styles[Math.floor((styles.length - 1) / 2)] = "Classics";
alert( styles.shift() );
styles.unshift("Rap", "Reggae");

Calling in an array context
What is the result? Why?

let arr = ["a", "b"];
arr.push(function() {
alert( this );
})
arr[2](); // ?

	solution

	let arr = ["a", "b"];
	arr.push(function() {
	alert( this );
	})
	arr[2](); // a,b,function(){...}

	note: The array has 3 values: initially it had two, plus the function.


	• Sum input numbers

	Write the function sumInput() that:
	Asks the user for values using prompt and stores the values in the array.
	Finishes asking when the user enters a non-numeric value, an empty string, or presses
	“Cancel”.
	Calculates and returns the sum of array items.
	P.S. A zero 0 is a valid number, please don’t stop the input on zero.

	solution

	function sumInput() {
	let numbers = [];
	while (true) {
	let value = prompt("A number please?", 0);
	// should we cancel?
	if (value === "" || value === null || !isFinite(value)) break;
	numbers.push(+value);
	}


	• A maximal subarray
	Write the function getMaxSubSum(arr) that will return that sum.
	getMaxSubSum([-1, 2, 3, -9]) == 5 (the sum of highlighted items)
	getMaxSubSum([2, -1, 2, 3, -9]) == 6
	getMaxSubSum([-1, 2, 3, -9, 11]) == 11
	getMaxSubSum([-2, -1, 1, 2]) == 3
	getMaxSubSum([100, -9, 2, -3, 5]) == 100
	getMaxSubSum([1, 2, 3]) == 6 (take all)
	getMaxSubSum([-1, -2, -3]) = 0

	function getMaxSubSum(arr) {
	let maxSum = 0;
	let partialSum = 0;
	for (let item of arr) { // for each item of arr
	partialSum += item; // add it to partialSum
	maxSum = Math.max(maxSum, partialSum); // remember the maximum
	if (partialSum < 0) partialSum = 0; // zero if negative
	}
	return maxSum;

	alert( getMaxSubSum([-1, 2, 3, -9]) ); // 5
	alert( getMaxSubSum([-1, 2, 3, -9, 11]) ); // 11
	alert( getMaxSubSum([-2, -1, 1, 2]) ); // 3
	alert( getMaxSubSum([100, -9, 2, -3, 5]) ); // 100
	alert( getMaxSubSum([1, 2, 3]) ); // 6
	alert( getMaxSubSum([-1, -2, -3]) ); // 0


