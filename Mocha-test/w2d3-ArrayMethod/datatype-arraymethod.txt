        
		Data type Tasks(13) home work
         		  let str = "Hello";
		str.test = 5;
		alert(str.test);
			How do you think, will it work? What will be shown?  // Answer:   error   in "use strict mode"
		
		
Create a script that prompts the visitor to enter two numbers and then shows their sum.

	let a = +prompt("The first number?", "");
	let b = +prompt("The second number?", "");
	alert( a + b ); 

Create a function readNumber which prompts for a number until the visitor enters a valid
numeric value.
The resulting value must be returned as a number.

	function readNumber() {
	let num;
	do {
	num = prompt("Enter a number please?", 0);
	} while ( !isFinite(num) );
	if (num === null || num === '') return null;
	return +num;
	}
	alert(`Read: ${readNumber()}`);


This loop is infinite. It never ends. Why?  this loop continues running exept for i = 10;
let i = 0;
while (i != 10) {
i += 0.2;
}


Write a function ucFirst(str) that returns the string str with the uppercased first character.

solution from text book			function ucFirst(str) {
			if (!str) return str;
			return str[0].toUpperCase() + str.slice(1);
			}
			alert( ucFirst("john") ); // John
			
		Array Methods
	Translate border-left-width to borderLeftWidth

Write the function camelize(str) that changes dash-separated words like “my-short-string”
into camel-cased “myShortString”.
That is: removes all dashes, each word after dash becomes uppercased.

solution from the text book 		function camelize(str) {
				return str
				.split('-') // splits 'my-long-word' into array ['my', 'long', 'word']
				.map(
				// capitalizes first letters of all array items except the first one
				// converts ['my', 'long', 'word'] into ['my', 'Long', 'Word']
				(word, index) => index == 0 ? word : word[0].toUpperCase() + word.slice(1)
				)
				.join(''); // joins ['my', 'Long', 'Word'] into 'myLongWord'
				}
			Filter range
	Write a function filterRange(arr, a, b) that gets an array arr , looks for elements with
	values higher or equal to a and lower or equal to b and return a result as an array.
	The function should not modify the array. It should return the new array.
solution from the text book.
		function filterRange(arr, a, b) {
		// added brackets around the expression for better readability
		return arr.filter(item => (a <= item && item <= b));
		}
		let arr = [5, 3, 8, 1];
		let filtered = filterRange(arr, 1, 4);
		alert( filtered ); // 3,1 (matching values)
		alert( arr ); // 5,3,8,1 (not modified)

		Filter range "in place"
Write a function filterRangeInPlace(arr, a, b) that gets an array arr and removes
from it all values except those that are between a and b . The test is: a ≤ arr[i] ≤ b .
The function should only modify the array. It should not return anything.
 
	solution from book
		function filterRangeInPlace(arr, a, b) {
		for (let i = 0; i < arr.length; i++) {
		let val = arr[i];
		// remove if outside of the interval
		if (val < a || val > b) {
		arr.splice(i, 1);
		i--;
		}
		}
		}
		let arr = [5, 3, 8, 1];
		filterRangeInPlace(arr, 1, 4); // removed the numbers except from 1 to 4
		alert( arr ); // [3, 1]

		Sort in decreasing order

let arr = [5, 2, 1, -10, 8];
arr.sort((a, b) => b - a);
alert( arr );  // -10, 1, 2, 5, 8

            Copy and sort array

We have an array of strings arr . We’d like to have a sorted copy of it, but keep arr
unmodified.
Create a function copySorted(arr) that returns such a copy.

		function copySorted(arr) {
		return arr.slice().sort();
		}
		let arr = ["HTML", "JavaScript", "CSS"];
		let sorted = copySorted(arr);
		alert( sorted ); // CSS, HTML, JavaScript
		alert( arr ); //  HTML, JavaScript, CSS (no changes)

                  Create an extendable calculator

	Create a constructor function Calculator that creates “extendable” calculator objects.
	The task consists of two parts.
	1.First, implement the method calculate(str) that takes a string like "1 + 2" in the
	format “NUMBER operator NUMBER” (space-delimited) and returns the result. Should
	understand plus + and minus - .
			Usage example:
		let calc = new Calculator;
		alert( calc.calculate("3 + 7") ); // 10
	2.Then add the method addMethod(name, func) that teaches the calculator a new
	operation. It takes the operator name and the two-argument function func(a,b) that
	implements it.
	For instance, let’s add the multiplication * , division / and power ** :

	let powerCalc = new Calculator;
	powerCalc.addMethod("*", (a, b) => a * b);
	powerCalc.addMethod("/", (a, b) => a / b);
	powerCalc.addMethod("**", (a, b) => a ** b);
	let result = powerCalc.calculate("2 ** 3");
	alert( result ); // 8
	.No parentheses or complex expressions in this task.
	.The numbers and the operator are delimited with exactly one space.
	.There may be error handling if you’d like to add it.

solution from book

	function Calculator() {
	this.methods = {
	"-": (a, b) => a - b,
	"+": (a, b) => a + b
	};
	this.calculate = function(str) {
	let split = str.split(' '),
	a = +split[0],
	op = split[1],
	b = +split[2];
	if (!this.methods[op] || isNaN(a) || isNaN(b)) {
	return NaN;
	}
	return this.methods[op](a, b);
	};
	this.addMethod = function(name, func) {
	this.methods[name] = func;
	};
	}

		Map to names
You have an array of user objects, each one has user.name . Write the code that converts it
into an array of names.
	For instance:	let john = { name: "John", age: 25 };
			let pete = { name: "Pete", age: 30 };
			let mary = { name: "Mary", age: 28 };
			let users = [ john, pete, mary ];
			let names = /* ... your code */
			alert( names ); // John, Pete, Mary

solution: 		let john = { name: "John", age: 25 };
		let pete = { name: "Pete", age: 30 };
		let mary = { name: "Mary", age: 28 };
		let users = [ john, pete, mary ];
		let names = users.map(item => item.name);
		alert( names ); // John, Pete, Mary

		Map to objects
You have an array of user objects, each one has name , surname and id .
Write the code to create another array from it, of objects with id and fullName , where
fullName is generated from name and surname .
 		For instance:
let john = { name: "John", surname: "Smith", id: 1 };
let pete = { name: "Pete", surname: "Hunt", id: 2 };
let mary = { name: "Mary", surname: "Key", id: 3 };
let users = [ john, pete, mary ];
let usersMapped = /* ... your code ... */
		/*
		usersMapped = [
		{ fullName: "John Smith", id: 1 },
		{ fullName: "Pete Hunt", id: 2 },
		{ fullName: "Mary Key", id: 3 }
		]
		*/
		alert( usersMapped[0].id ) // 1
		alert( usersMapped[0].fullName ) // John Smith

      Solution: from Book        let john = { name: "John", surname: "Smith", id: 1 };
			let pete = { name: "Pete", surname: "Hunt", id: 2 };
			let mary = { name: "Mary", surname: "Key", id: 3 };
			let users = [ john, pete, mary ];
			let usersMapped = users.map(user => ({
			fullName: `${user.name} ${user.surname}`,
			id: user.id
			}));
			/*
			usersMapped = [
			{ fullName: "John Smith", id: 1 },
			{ fullName: "Pete Hunt", id: 2 },
			{ fullName: "Mary Key", id: 3 }
			]
			*/
			alert( usersMapped[0].id ); // 1
			alert( usersMapped[0].fullName ); // John Smith
			Please note that in the arrow functions we need to use additional brackets.
			We can’t write like this:
			let usersMapped = users.map(user => {
			fullName: `${user.name} ${user.surname}`,
			id: user.id
			});
			As we remember, there are two arrow functions: without body value => expr and with
			body value => {...} .
			Here JavaScript would treat { as the start of function body, not the start of the object.
			The workaround is to wrap them in the “normal” brackets:
			let usersMapped = users.map(user => ({
			fullName: `${user.name} ${user.surname}`,
			id: user.id
			}));

				Sort users by age
		
Write the function sortByAge(users) that gets an array of objects with the age property and
sorts them by age .
		For instance:

			let john = { name: "John", age: 25 };
			let pete = { name: "Pete", age: 30 };
			let mary = { name: "Mary", age: 28 };
			let arr = [ pete, john, mary ];
			sortByAge(arr);
			// now: [john, mary, pete]
			alert(arr[0].name); // John
			alert(arr[1].name); // Mary
			alert(arr[2].name); // Pete
solution from book:   function sortByAge(arr) {
			arr.sort((a, b) => a.age - b.age);
			}
		     let john = { name: "John", age: 25 };
		    let pete = { name: "Pete", age: 30 };
		    let mary = { name: "Mary", age: 28 };
		   let arr = [ pete, john, mary ];
		sortByAge(arr);
		// now sorted is: [john, mary, pete]
		alert(arr[0].name); // John
		alert(arr[1].name); // Mary
		alert(arr[2].name); // Pete

						Shuffle an array
Write the function shuffle(array) that shuffles (randomly reorders) elements of the array.
Multiple runs of shuffle may lead to different orders of elements. For instance:
		let arr = [1, 2, 3];
		shuffle(arr);
		// arr = [3, 2, 1]
		shuffle(arr);
		// arr = [2, 1, 3]
		shuffle(arr);
		// arr = [3, 1, 2]
		// ...
	All element orders should have an equal probability. For instance, [1,2,3] can be reordered
		as [1,2,3] or [1,3,2] or [3,1,2] etc, with equal probability of each case.
             solution:   function shuffle(array) {
			array.sort(() => Math.random() - 0.5);
			}
			let arr = [1, 2, 3];
			shuffle(arr);
			alert(arr);
That somewhat works, because Math.random() - 0.5 is a random number that may
be positive or negative, so the sorting function reorders elements randomly.
But because the sorting function is not meant to be used this way, not all permutations
have the same probability.
For instance, consider the code below. It runs shuffle 1000000 times and counts
appearances of all possible results:
          Solution:	function shuffle(array) {
		array.sort(() => Math.random() - 0.5);
		}
		// counts of appearances for all possible permutations
		let count = {
		'123': 0,
		'132': 0,
		'213': 0,
		'231': 0,
		'321': 0,
		'312': 0
		};
		for (let i = 0; i < 1000000; i++) {
		let array = [1, 2, 3];
		shuffle(array);
		count[array.join('')]++;
		}
		// show counts of all possible permutations
		for (let key in count) {
		alert(`${key}: ${count[key]}`);
		}

				Get average age
Write the function getAverageAge(users) that gets an array of objects with property age
and returns the average age.
The formula for the average is (age1 + age2 + ... + ageN) / N .
For instance:              let john = { name: "John", age: 25 };
		   let pete = { name: "Pete", age: 30 };
		   let mary = { name: "Mary", age: 29 };
		   let arr = [ john, pete, mary ];
		   alert( getAverageAge(arr) ); // (25 + 30 + 29) / 3 = 28

solution:		 function getAverageAge(users) {
		return users.reduce((prev, user) => prev + user.age, 0) / users.length;
		}
		let john = { name: "John", age: 25 };
		let pete = { name: "Pete", age: 30 };
		let mary = { name: "Mary", age: 29 };
		let arr = [ john, pete, mary ];
		alert( getAverageAge(arr) ); // 28

						Filter unique array members

Let arr be an array.
Create a function unique(arr) that should return an array with unique items of arr .
For instance:
		function unique(arr) {
		/* your code */
		}
		let strings = ["Hare", "Krishna", "Hare", "Krishna",
		"Krishna", "Krishna", "Hare", "Hare", ":-O"
		];
		alert( unique(strings) ); // Hare, Krishna, :-O

solution from book:  function unique(arr) {
		let result = [];
		for (let str of arr) {
		if (!result.includes(str)) {
		result.push(str);
		}
		}
		return result;
		}
		let strings = ["Hare", "Krishna", "Hare", "Krishna",
		"Krishna", "Krishna", "Hare", "Hare", ":-O"
		];
		alert( unique(strings) ); // Hare, Krishna, :-O

							Create keyed object from array
				
				Let’s say we received an array of users in the form {id:..., name:..., age... } .
				Create a function groupById(arr) that creates an object from it, with id as the key, and
				array items as values.
		For example:
				let users = [
				{id: 'john', name: "John Smith", age: 20},
				{id: 'ann', name: "Ann Smith", age: 24},
				{id: 'pete', name: "Pete Peterson", age: 31},
				];
				let usersById = groupById(users);
				/*
				// after the call we should have:
				usersById = {
				john: {id: 'john', name: "John Smith", age: 20},
				ann: {id: 'ann', name: "Ann Smith", age: 24},
				pete: {id: 'pete', name: "Pete Peterson", age: 31},
				}
				*/
Such function is really handy when working with server data.
In this task we assume that id is unique. There may be no two array items with the same id .
Please use array .reduce method in the solution.

       solution from book:     		  function groupById(array) {
				return array.reduce((obj, value) => {
				obj[value.id] = value;
				return obj;
				}, {})
				}



































